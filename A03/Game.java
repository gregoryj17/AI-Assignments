import java.util.*;

class Game
{

	static double[] getWinner(double[] a, double[] b){
		double aFit = a[291]<=0?0:1.0/a[291];
		double bFit = b[291]<=0?0:1.0/b[291];
		if(aFit<bFit){
			return b;
		}
		else if(aFit>bFit){
			return a;
		}
		else{
			return Math.random()<0.5?a:b;
		}
	}

	static double[] evolveWeights() throws Exception {
		// Create a random initial population
		Random r = new Random();
		//First 291 chromosomes are the actual weights for the agent
		Matrix population = new Matrix(100, 292);
		for (int i = 0; i < 100; i++) {
			double[] chromosome = population.row(i);
			for (int j = 0; j < chromosome.length - 1; j++)
				chromosome[j] = 0.03 * r.nextGaussian();
			chromosome[291] = 0;
		}


		// Evolve the population
		// todo: YOUR CODE WILL START HERE.
		//       Please write some code to evolve this population.
		//       (For tournament selection, you will need to call Controller.doBattleNoGui(agent1, agent2).)

		StateComparator statecomp = new StateComparator();

		for(int runs=0; runs<500;runs++){
			PriorityQueue<double[]> newpop = new PriorityQueue<>(statecomp);
			for (int i = 0; i < 50; i++) {
				double[] bot1 = population.row(i * 2);
				double[] bot2 = population.row(i * 2 + 1);

				long start = System.nanoTime();
				int win = Controller.doBattleNoGui(new ReflexAgent(), new NeuralAgent(Arrays.copyOfRange(bot1, 0, 291)));
				long end = System.nanoTime();
				bot1[291] = -1 * win * (end - start);

				start = System.nanoTime();
				win = Controller.doBattleNoGui(new ReflexAgent(), new NeuralAgent(Arrays.copyOfRange(bot2, 0, 291)));
				end = System.nanoTime();
				bot2[291] = -1 * win * (end - start);

				newpop.add(bot1);
				newpop.add(bot2);
			}

			for (int i = 0; i < 50; i++) {
				double[] chromosome = population.row(i);
				double[] tocopy = newpop.poll();
				for (int j = 0; j < chromosome.length; j++)
					chromosome[j] = tocopy[j];
			}

			for (int i = 0; i < 50; i++) {
				double[] chromosome = population.row(i + 50);
				for (int j = 0; j < chromosome.length - 1; j++) {
					chromosome[j] = population.row(i)[j] + (Math.random()<.02?0.15 * r.nextGaussian():0);
				}
				chromosome[291] = 0;
			}
			/*if(runs==0){
				System.out.println("......................... 0 "+population.row(0)[291]+" "+population.row(49)[291]);
			}
			System.out.print(".");
			if((runs+1)%25==0){
				System.out.println(" "+(runs+1)/25+" "+population.row(0)[291] + " " + population.row(49)[291]);
			}
			double[] a = population.row(0);
			double[] b = population.row(49);
			double aFit = a[291]==0?0:10000000000.0/a[291];
			double bFit = b[291]==0?0:10000000000.0/b[291];
			System.out.println((runs+1)+"\t"+aFit+"\t"+bFit);*/
		}

		// Return an arbitrary member from the population
		return Arrays.copyOfRange(population.row(0),0,291);
	}


	public static void main(String[] args) throws Exception
	{
		double[] w = new double[]{-0.43754083066835764, -0.16245578536614338, 0.2672960433513778, -0.2944262931197196, -0.15051199149025582, -0.020738864147174425, 0.30450407958991743, 0.09690497333916309, 0.3118936353976013, 0.15935250227278322, -0.10395870442445962, 0.12181522850637587, 0.08848566131102101, -0.06607461333240658, 0.02190370328926916, -0.010025261656030453, 0.07507539367604749, 0.10229038836522154, -0.02260059107378587, -0.03463868444286144, 0.31620405621877007, -0.07407386343652753, -0.02903358063454946, -0.13644793836028513, -0.04503871099129876, -0.07098480121933567, 0.29977968985579007, 0.03154099710686131, -0.23873345647727656, 0.022627512694112013, 0.19050309003381427, -0.07426970218669336, -0.08471971013941412, -0.2329631553732725, 0.2158350112887184, 0.3727898159261469, -0.10652335914486627, 0.1365382980982654, -0.09429541561305904, -0.05658040673380748, -0.10612506060037494, -0.019545130107696415, -0.002070708920645009, -0.18416438980953895, -0.24478259374512368, 0.21402699116938134, 2.5182830481737994E-4, 0.04680485515656446, -1.8330899883932817E-4, -0.2778998544251752, 0.09574070198749386, -0.17900371302558468, 0.41284608281532625, 0.021119068867326524, 0.05463671336924705, 0.10228469259659329, -0.03244416830752169, 0.2025094035388695, -0.02701798855713236, -0.002069984680360664, -0.08913355935511835, -0.02747606144069856, 0.007191552938006521, 0.16111335304758254, 0.2507494810789497, -0.20400283772823616, 0.2076570020796511, 0.29296804486607225, -0.08008253826748245, 0.33935842277722, 0.15905788608784527, -0.3301602146406051, 0.18960457106144502, 0.015207358628547236, -0.038286379672549636, -0.14436267952425477, -0.009946052632458933, 0.11386471074054089, -0.043949417898436656, 0.08891848691711673, -0.007705021632364597, -0.039176387035862965, -0.03942486073233553, -0.37594514491553094, 0.003237839743702009, 0.030650936680146575, -0.0198261241365834, 0.09875807991278449, -0.049393437908820934, -0.3728716300628243, -0.11149521530592243, 0.04189067119901845, -0.1186228628814824, 0.10801990068019755, -0.024128233086165657, -0.06869818930855984, -0.08852680321189388, -0.15747154149889347, 0.014569560711238945, -0.12761609853659353, 0.02088306385605303, 0.1584012461688901, -0.05132228594534869, -0.39819070133691753, -0.030435186353932567, 0.3264481405557449, 0.4497860545096318, 0.03587400146503111, -0.12091878012074042, 0.5888848283877147, -0.03579583381488316, 0.26306631933782726, 0.026543557197346974, -0.17658636525882634, 0.08047523314251138, 0.01646295791163341, -0.06259563047091429, 0.013330395342492512, -0.16100498612999306, -0.04831280614289203, 0.16929466021963527, -0.025716337794868052, 0.11348488432413473, -0.15532155784749524, -0.44705813949836926, 0.04993961594867584, -0.2882844061582324, -0.061558253615837784, 0.12929874725922755, -0.4399234098656525, -0.35743453352219434, 0.0698414714025631, 0.2957645349666944, 0.33986687994520565, 0.015409745706079477, -0.13636437753473962, 0.08635167427419922, 0.03399612336612699, -0.22794285064363395, -0.09054660788915227, 0.008738891899033851, -0.009725666850263359, 0.008406325493117268, -0.041783402730040775, -0.038728146501481486, -0.06637354508589424, 0.22614706278623942, -0.009144975721386756, 0.12588395930713256, 0.2066560020699865, -0.44654640208828117, 0.15635686930379483, 6.987144679064597E-4, -0.07630864390525197, 0.11765299563704926, -0.028831476794857095, 0.35504836498074954, 7.516561309474117E-4, 0.25620799309886483, -0.3493531114189041, 0.03272959203774265, -0.14386448901060206, 0.05458928180360885, 0.003375474795413964, 0.015781301617154714, -0.14731122751383008, 0.011091555210882573, -0.2582674823531016, -0.018083681640522764, -0.03201773489736853, -0.0027307786121126545, -0.02225104200288889, -0.06516925504466864, -0.037250572977829674, 0.0916116508296157, 0.004996231697731073, 0.029240083963675098, 0.11330444675163595, -0.09428023987907136, 0.06364781104141713, 0.19035482459929687, -0.3431592890034109, 0.32621092077395347, 0.2835522779591312, -0.06654989855627141, -0.09539608700151728, -0.007775082801540699, 0.02894365848916487, -0.009669494207943495, 0.0333452367744005, 0.06758289997059354, -0.20317017554805517, 0.1023042108371579, -0.04608958865983499, -0.013305101785190655, -0.04145176022541766, -0.16956214729764674, 0.3906922891195128, -0.3141219356865938, -0.01919747310195068, -0.009521856042353258, 0.0062871652582440095, 0.2051657776531255, 0.05970618614942232, 0.007358916637924453, -0.29917516268748345, 0.2440670685517684, -0.3689535893384409, 0.03090559663933745, -0.2156091937715835, 0.16356001764100003, -0.0818328106400032, 0.18152164552647423, 0.29318863125341244, -0.023612482651601218, 0.09368745369268286, 0.10338886435742499, 0.108822178844848, 0.03124212128686197, -0.014237276287539988, -0.054678588342406034, -0.03235283832246902, 0.16178564530234912, -0.07896954864012634, 0.07143327043194175, -0.0730410768921081, 0.02208033688425439, 0.03125346297352176, -0.048872469811172776, -0.09735645936729177, 0.0013252597528724396, -0.12854704830322009, 0.024299341276231762, -0.16145909367709996, 0.04968547022396414, -0.1914851829507838, -0.07206737952482306, 0.09001850336773029, -0.044992198815559686, 0.3921223688705097, -0.41415778881926557, -0.14129875157197547, 0.21895092023517795, 0.21727519735469983, 0.19961056733123664, -0.01827766249716438, -0.2672781764373593, 0.04664261246744207, 0.3635687508452006, -0.006572623232081548, 0.00883637913510113, 0.04337378795637737, -0.005539927970848399, 0.025070093931202114, 0.2614700157803706, 0.1556146655374697, 0.05962189853097605, -0.08525037781786955, -0.6114712729701604, -0.030556832832717817, -0.06096782993252117, -0.12940325630165678, -0.014634362691723822, -0.06282443308796581, 0.04037731722236233, -0.11856694296677016, -0.4737360030890595, -0.15848817028864576, 0.16065908167323198, -0.35305596686599133, -0.21724637215210388, -3.3434809353998646E-4, -0.1698691187001855, 0.16680247927495975, -0.09700112868432464, -0.06094759055500133, 0.012182805157660995, -0.038233264210643915, 0.7512211480289175, 0.08025053779821531, -0.327836004768597, 0.014669561515739976, -0.3087900559328476, 0.2063327031801389, 0.19091136876761897, -0.1633045292172411, 0.11777666016181279, -0.14154583798164977, 0.26403434118205826, 0.31572108989534786, -0.09090387138151015};
		//w = evolveWeights();
		Controller.doBattle(new ReflexAgent(), new NeuralAgent(w));
		//System.out.println(Arrays.toString(w));
	}

}

class StateComparator implements Comparator<double[]> {
	public int compare(double[] a, double[] b){
		double aFit = a[291]==0?0:1.0/a[291];
		double bFit = b[291]==0?0:1.0/b[291];
		if(aFit<bFit){
			return 1;
		}
		else if(aFit>bFit){
			return -1;
		}
		else{
			return 0;
		}
	}
}